
About Statbox
=============

Features
--------
* The service connects to Dropbox and retrieves the metadata of a user's files and folders.

* These information are stored in the server DB (MongoDB) to be processed and made available to the user interface.

* A background job recursively computes the total size of each directory when an update has just occurred.

* The web interface allows navigation in the folders, displays the sizes of current sub-directories, and the repartition of data using a pie-chart diagram (GChart library).

* The web client always holds a copy of all the information he needs to construct the display (the "View"). A user may request to refresh the client's cache at will, this will trigger a new call to the REST API to check for new delta information from Dropbox, and update the View.

* Besides the main view, the display includes a loginbox, welcome and error screens with the correct workflow.

* Navigation is fully "AJAX" but reloading the page does not destroy navigation (we use a server-side cookie-indexed session map in memory).

* Styles and layout are based on twitter bootstrap API.

* The service is entirely coded in Opa, a new (somewhat experimental) strongly-typed, functional, web programming language.

Current limitations
-------------------
* Request to MongoDB are not optimized (at the very least we should add the proper indexes == N.B. this can also be done manually outside the code).

* Security has not extensively checked. A the very least, small memory leaks are to be expected because of the creation of "size-daemons" in ram. The Dropbox API has obviously the power to block a user. (Note that here protection against filesystem-based XSS attacks should be brought for free by Opa.)

* Atomicity of multiple DB requests is been not rigorously enforced. This might cause thread-safety issues when a same user connects from several browser is probably not enforced (although the same 'cursor' value of the API will be used, we may have concurrent REST requests with different authentication token). However, the job for computing sizes uses a lock for every user (the lock mechanisms are buried in the "actors" of Opa, actually called "Session").

* At the moment, the Opa binding for Dropbox consistently ignores all HTTP error codes. This could be a problem to detect expiration of long term credentials and gracefully ask for new ones. The REST client will not deal with rate limitation either, for the same reason.

* Client/Server network communication is probably not very optimized. However, the source code theoretically only use asynchronous communication.

* The job for updating the computed sizes uses a "TODO set" and a top-down search that only refreshes outdated information for reachable nodes. However, more clever strategies could be imagined in some cases: for instance propagating the differences between the old size and the new size of an object.

* We need more charts :-) Like one by type of file (~ icon).

How to compile & deploy
=======================

I currently use Opa 0.9 build 1845 to compile on MAC and Linux.

Use 'make clean && make'. The generated binary can be run with './statbox -p 8080' provided 'mongod' already runs in background on the standard port.

The section 'make run' of the Makefile uses calls to 'authbind' to access port 80.

About the Source code
=====================

* config.opa : application-wide constants and authentication secrets
(Mathieu: DO NOT push on github)

* main.opa : URL dispatcher, redirection page, (hidden) admin page

* data.opa : types, DB declaration, and utility functions for the server-side data. Includes Daemons for computing analystics in background.

* server.opa : AJAX API showed to the web client. Mostly connects data.opa and view.opa

* session.opa : server-side in-memory states of users, in particular the OAuth credentials and the navigation state

* view.opa : types and values for the client-side data, all the corresponding rendering functions.

The following files have been imported from the Opa standard library to make it easier to review (and possibly patch) them.

* stdlib/dropbox.opa : Opa's standard REST binding on the top of Dropbox. Includes types for typical objects exchanged with the API.

* stdlib/oauth.opa : Opa's standard binding on the top of the OAuth protocol

* stdlib/api_libs.opa : useful functions for REST bindings
